generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model application {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status         String      @db.VarChar(255)
  user_id        String      @db.Uuid
  job_posting_id String      @db.Uuid
  cover_letter   String      @db.VarChar(255)
  resume         String      @db.VarChar(255)
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  job_posting    job_posting @relation(fields: [job_posting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  industry    String?       @db.VarChar(255)
  size        Int?
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_posting job_posting[]
}

model job_posting {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String        @db.VarChar(255)
  description String        @db.VarChar(255)
  company_id  String        @db.Uuid
  location    String        @db.VarChar(255)
  salary      Int
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  application application[]
  company     company       @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  review      review[]
}

model review {
  id                            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rating                        Int
  comment                       String      @db.VarChar(255)
  reviewer_id                   String      @db.Uuid
  reviewee_id                   String      @db.Uuid
  job_posting_id                String      @db.Uuid
  created_at                    DateTime    @default(now()) @db.Timestamp(6)
  updated_at                    DateTime    @default(now()) @db.Timestamp(6)
  job_posting                   job_posting @relation(fields: [job_posting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_review_reviewee_idTouser user        @relation("review_reviewee_idTouser", fields: [reviewee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_review_reviewer_idTouser user        @relation("review_reviewer_idTouser", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model skill {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String   @db.VarChar(255)
  experience        Int
  user_id           String   @db.Uuid
  endorsement_count Int
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  user              user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                           String        @unique @db.VarChar(255)
  firstName                       String?       @db.VarChar(255)
  lastName                        String?       @db.VarChar(255)
  roq_user_id                     String        @db.VarChar(255)
  tenant_id                       String        @db.VarChar(255)
  created_at                      DateTime      @default(now()) @db.Timestamp(6)
  updated_at                      DateTime      @default(now()) @db.Timestamp(6)
  application                     application[]
  company                         company[]
  review_review_reviewee_idTouser review[]      @relation("review_reviewee_idTouser")
  review_review_reviewer_idTouser review[]      @relation("review_reviewer_idTouser")
  skill                           skill[]
}
